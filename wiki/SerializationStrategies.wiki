#summary This page gives an overview over available (pluggable) serialization strategies with their pro's and con's.

= Introduction =

By default memcached-session-manager uses Java's serialization to serialize session data so that it can be sent to memcached. The same applies to deserialization of course.

As Java's serialization has some limitations/disadvantages, the serialization strategy can be changed and replaced by alternative ones. However, Java serialization also brings in some useful stuff, which should not get lost with other serialization strategies.

== Pro's/Con's of Java's serialization ==

  * *PRO: handles cyclic dependencies.*
  * *PRO: supports private classes classes.* During deserialization private classes are a challange, as even the Class object is not visible and therefore you cannot dynamically create an instance of such a class.
  * *PRO: supports classes without default constructor.* If a class does not provide a default constructor (a constructor without any arguments), you don't know how to create a new instance of this class.
  * ... more, less?

  * *CON: classes to be serialized need to implement `java.io.Serializable`.* Unfortunately you don't have always the code at your hand that shall get serialized.
  * *CON: no support for different versions of the same class.* All clients reading the serialized content need to have exactly the same version of the compiled class.
  * *CON: the serialised files are not human readable.* If you want to inspect the serialized content e.g. because you want to see if things can be optimized somehow, you cannot just look at what got serialized.
  * ... more, less?

== Requirements for serialization strategies ==
This section shall outline, which feature a serialization protocol must provide so that it can be used for a serialization strategy for the memcached-session-manager.

  * *Serialization of dynamic structures.* This requirement is a result from an asumption, that users shall not be forced to provide s.th. like a schema for their session objects. Most of the time, users even don't know really, what gets stored in the http session and what not. Therefore it's rather impossible to provide a structural definition of the session attributes. However, if this asumption is wrong, serialization of dynamic structures is no longer a requirement :)
  * *Recreate appropriate types during deserialization.* As session attributes are just bound to a name, that type information for the attribute values must be stored by the serialization protocal. That's the reason, why JSON is (unfortunately) not an appropriate serialization protocol for the memcached-session-manager. One would need to implement a custom JSON format (and I would be happy, if Jackson would/could do this).

= Details =

Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages