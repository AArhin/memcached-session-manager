#labels Featured,Phase-Deploy
This page shows what's necessary to get the memcached-session-manager up and running.

= Introduction =

For the most simple integration you just need to have a tomcat and a memcached installed.
In your production environment you probably will have several tomcats and you should also have several memcached nodes available, on different pieces of hardware. You need to use sticky sessions, as the memcached-session-manager is designed just for sticky-sessions. Therefore, your load-balancer also has to be configured to make sessions sticky.

The following description assumes, that you have two instances of tomcat and two instances of memcached installed.

Tomcat-1 (t1) will primarily store it's sessions in memcached-2 (m2). Only if m2 is not available, it will store it's sessions in memcached-1 (m1). This is desirable, if t1 and m1 are running on one machine, and tomcat-2 (t2) and m2 are running on another machine. In this case, even the first machine (serving t1 and m1) could crash completely and no session would be lost - they could be served by t2 and m2. The following really nice ASCII art shows this setup.

{{{
<t1>   <t2>
  . \ / .
  .  X  .
  . / \ .
<m1>   <m2>
}}}

= Details =

So what needs to be done for this?

== Configure tomcat ==
  * Drop the memcached-session-manager-1.0.jar and the memcached-2.4.jar (spymemcached) in {{{$CATALINA_HOME/lib/}}} (memcached-session-manager is in version 1.0 and spymemcached is 2.4 at the time of this writing)
  * Configure the appropriate context in your {{{$CATALINA_HOME/conf/server.xml}}} so that it contains the {{{Manager}}} configuration for the memcached-session-manager, like this:
{{{
<Context path="/foo">
  <Manager className="de.javakaffee.web.msm.MemcachedBackupSessionManager"
    memcachedNodes="n1:localhost:11211 n2:localhost:11212"
    failoverNodes="n2"
    requestUriIgnorePattern=".*\.(png|gif|jpg|css|js)$"
    />
</Context>
}}}

(This assumes, that you have running two memcached nodes on localhost, one on port 11211 and another one on port 11212)

Now you have finished the configuration of your first tomcat. For the second tomcat you just need to change the failover node, you should set this to {{{n1}}} for tomcat-2.

== `MemcachedBackupSessionManager` configuration attributes ==

_memcachedNodes_ (required)
  This attribute must contain all memcached nodes you have running. Each memcached node is defined as {{{<id>:<host>:<port>}}}. Several definitions are separated by space.<br/>
<br/>
_failoverNodes_ (optional)
 This attribute must contain the ids of the memcached nodes, that shall not be used by this tomcat for session backup, but only if no other memcached nodes are available. Therefore, you should list those memcached nodes, that are running on the same machine as this tomcat. Several memcached node ids are separated by space.<br/>
<br/>
_requestUriIgnorePattern_ (optional)
 This attribute contains a regular expression for request URIs, that shall not trigger a session backup. If static resources like css, javascript, images etc. are delivered by the same tomcat and the same web application context these requests will also pass the memcached-session-manager. However, as these requests should not change anything in a http session, they should also not trigger a session backup. So you should check if any static resources are delivered by tomcat and in this case you should exclude them by using this attribute. The {{{requestUriIgnorePattern}}} must follow the java regex [http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html Pattern].